`timescale 1ns / 1ps

module tb_regfile;

reg clk, reset;
reg [15:0] wdata, regEnable, rdataA, rdataB;
reg [3:0] raddrA, raddrB;

regfile DUT (
    .clk(clk),
    .reset(reset),
    .wdata(wdata),
    .regEnable(regEnable),
    .raddrA(raddrA),
    .raddrB(raddrB),
    .rdataA(rdataA),
    .rdataB(rdataB)
);

// Clock generation
always #5 clk=0; clk = ~clk;

initial begin
    // Monitor changes. Displays all inputs and outputs
    $monitor("Time: %0t | clk: %b | reset: %b | wdata: %h | regEnable: %b | raddrA: %h | raddrB: %h | rdataA: %h | rdataB: %h", 
             $time, clk, reset, wdata, regEnable, raddrA, raddrB, rdataA, rdataB);


    // Initialize signals
    clk = 0;
    reset = 1;
    wdata = 16'h0000;
    regEnable = 16'h0000;
    raddrA = 4'h0;
    raddrB = 4'h0;

    // Release reset after some time
    #10;
    reset = 0;

    // Write to register 3
    #10;
    wdata = 16'hABCD;
    regEnable = 16'b0000_0000_0000_1000; // Enable write to register 3

    // Write to register 5
    #10;
    wdata = 16'h1234;
    regEnable = 16'b0000_0000_0010_0000; // Enable write to register 5

    // Read from registers 3 and 5
    #10;
    raddrA = 4'h3; // Read from register 3
    raddrB = 4'h5; // Read from register 5

    // Wait and then finish simulation
    #20;
    $finish;
end
